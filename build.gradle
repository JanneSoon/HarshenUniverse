buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "0.25.1"
group = "kenijey.harshenuniverse"
archivesBaseName = "HarshenUniverse"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    mappings = "snapshot_20180101"
}

repositories {
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "http://dvs1.progwml6.com/files/maven"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "modmaven.k-4u.nl"
  }
}

repositories {
	maven {
		url "http://www.ryanliptak.com/maven/"
	}
}

dependencies {

    deobfProvided "mezz.jei:jei_1.12.2:4.16.1.301:api"
    runtime "mezz.jei:jei_1.12.2:4.16.1.301"
	
	deobfCompile "applecore:AppleCore:1.12.2-3.4.0+356.64453:deobf"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task apiJar(type: Jar) {
    classifier = "api"
    from(sourceSets.main.output) {
        include "kenijey/harshenuniverse/api/**"
    }
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}
    
artifacts {
        archives apiJar
	archives sourcesJar
}